---
export const prerender = false;

import { Result } from "@sapphire/result";
import Layout from "../../layouts/Layout.astro";
import { validateForm } from "../../utils";

let error = null;

const code = Astro.url.searchParams.get("code");
const state = Astro.url.searchParams.get("state");
const responses = state !== null ? Result.from(() => JSON.parse(atob(state))).andThen(d => validateForm(d)) : null;
const questionsMap = {
	punishmentType: "What kind of punishment are you appealing?",
	blockedChannel: "What channel were you blocked from?",
	role: "What role were you given?",
	punishmentReason: "Why were you given this punishment?",
	fairness: "Do you believe this punishment was fair?",
	reasoning: "Why should we reverse this punishment?"
};

const result = await Result.fromAsync(async () => {
	if (code === null)
		throw "Discord Oauth2 code was missing, unable to authenticate. This site should only be accessed through discord redirect.";
	if (responses === null)
		throw "Encoded state was missing, unable to decode responses. This site should only be accessed through discord redirect.";
	const validResponses = responses.expect(
		"Form responses were invalid, unable to submit. This site should only be accessed through discord redirect."
	);

	const accessTokenResponse = await fetch("https://discord.com/api/oauth2/token", {
		method: "POST",
		headers: {
			"Content-Type": "application/x-www-form-urlencoded"
		},
		body: new URLSearchParams({
			grant_type: "authorization_code",
			code,
			redirect_uri: `http://${import.meta.env.REDIRECT_HOST}/appeals/oauth2-callback`,
			client_id: import.meta.env.CLIENT_ID,
			client_secret: import.meta.env.CLIENT_SECRET
		}).toString()
	}).then(r => r.json());

	if (accessTokenResponse.error === "invalid_grant")
		throw "Your discord login was unable to be validated. This usually happens if the page is resubmitted by accident.";
	else if ("error" in accessTokenResponse)
		throw `Unknown discord code grant error: "${JSON.stringify(accessTokenResponse)}"`;

	const bearerToken = accessTokenResponse.access_token;
	const meResponse = await fetch("https://discord.com/api/oauth2/@me", {
		method: "GET",
		headers: {
			Authorization: `Bearer ${bearerToken}`
		}
	}).then(r => r.json());
	if (import.meta.env.BANNED_IDS.split(",").includes(meResponse.user.id))
		throw "You have been banned from making appeals";

	// Submit the webhook
	await fetch(import.meta.env.WEBHOOK_URL, {
		method: "POST",
		headers: {
			"Content-Type": "application/json"
		},
		body: JSON.stringify({
			username: "New Punishment Appeal",
			embeds: [
				{
					title: "New Appeal Form Entry",
					type: "rich",
					color: 0x0080ff,
					fields: [
						{
							name: "What is your discord ID?",
							value: meResponse.user.id
						},
						...Object.entries(validResponses).map(([k, v]) => ({
							name: questionsMap[k as keyof typeof validResponses],
							value: v
						}))
					]
				}
			]
		})
	});
});

if (result.isErr()) error = String(result.unwrapErr());
---

<Layout title="Form Confirmation">
	<main>
		{
			error === null ? (
				<>
					<h1>Form Confirmation</h1>
					<p>
						Thanks for submitting the appeal form! We may not directly inform you when we decide, so check if the
						punishment has been reversed often.
					</p>
				</>
			) : (
				<>
					<h1>Form Error</h1>
					<p>
						Your form was unable to be submitted due to an error. If you believe this to be unintentional, please DM
						@t.y.y for assistance.
						<>
							<br />
							<br />
						</>
						Error:
						<br />
						{error}
					</p>
				</>
			)
		}
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
</style>
